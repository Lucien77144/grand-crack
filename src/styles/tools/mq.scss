$mq-breakpoints: (
	mini: 361px,
	mobile: 481px,
	tablet: 769px,
	desktop: 993px,
	small: 1025px,
	medium: 1281px,
	large: 1441px,
	wide: 1681px,
	extrawide: 2860px,
	ultrawide: 3840px,
);
$mq-responsive: true !default;
$mq-static-breakpoint: desktop !default;
$mq-show-breakpoints: (
) !default;

@function mq-px2em($px, $base-font-size: 16px) {
	@if unitless($px) {
		@warn "Assuming #{$px} to be in pixels, attempting to convert it into pixels for you";
		@return mq-px2em($px + 0
	);
	} @else if unit($px) == em {
		@return $px;
	}

	@return calc($px / $base-font-size) * 1em;
}

@function mq-get-breakpoint-width($name) {
	@if map-has-key($mq-breakpoints, $name) {
		@return map-get($mq-breakpoints, $name);
	} @else {
		@warn "Breakpoint #{$name} does not exist";
	}
}

@mixin mq($from: false, $until: false, $and: false, $to: null) {
	@if $to {
		@if not $until {
			@warn "$to is deprecated, you should use $until instead";

			$until: $to;
		} @else {
			@warn "You are using $until and $to together. $to is deprecated and has been ignored. You should remove it.";
		}
	}

	$min-width: 0;
	$max-width: 0;
	$media-query: "";

	@if $from {
		@if type-of($from) == number {
			$min-width: mq-px2em($from);
		} @else {
			$min-width: mq-px2em(mq-get-breakpoint-width($from));
		}
	}

	@if $until {
		@if type-of($until) == number {
			$max-width: mq-px2em($until);
		} @else {
			$max-width: mq-px2em(mq-get-breakpoint-width($until)) - 0.01em;
		}
	}

	@if $mq-responsive == false {
		$static-breakpoint-width: mq-get-breakpoint-width($mq-static-breakpoint);

		@if type-of($static-breakpoint-width) == number {
			$target-width: mq-px2em($static-breakpoint-width);

			@if $and == false and ($min-width <= $target-width) and (($until == false) or ($max-width >= $target-width)) {
				@content;
			}
		} @else {
			@warn "No static styles will be output: #{$static-breakpoint-width}";
		}
	} @else {
		@if $min-width != 0 {
			$media-query: "#{$media-query} and (min-width: #{$min-width})";
		}

		@if $max-width != 0 {
			$media-query: "#{$media-query} and (max-width: #{$max-width})";
		}

		@if $and {
			$media-query: "#{$media-query} and #{$and}";
		}

		$media-query: #{$media-query};

		@media #{all + $media-query} {
			@content;
		}
	}
}

@function mq-add-breakpoint($name, $breakpoint) {
	$new-breakpoint: (
		$name: $breakpoint,
	);

	@return map-merge($mq-breakpoints, $new-breakpoint);
}

@if length($mq-show-breakpoints) > 0 {
	body::before {
		background-color: #fcf8e3;
		border-bottom: 0.05rem solid #fbeed5;
		border-left: 0.05rem solid #fbeed5;
		color: #c09853;
		font: small-caption;
		padding: 3px 6px;
		position: fixed;
		right: 0;
		top: 0;
		z-index: 100;

		@each $show-breakpoint in $mq-show-breakpoints {
			$width: mq-get-breakpoint-width($show-breakpoint);

			@include mq($show-breakpoint) {
				content: "#{$show-breakpoint} â‰¥ #{$width} (#{mq-px2em($width)})";
			}
		}
	}
}
